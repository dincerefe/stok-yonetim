// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// AUTHENTICATION MODELS (NextAuth.js için Gerekli)
// ==============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==============================================
// APPLICATION MODELS (Uygulama Modelleri)
// ==============================================

model Company {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  users      User[]
  stockItems StockItem[]
  categories Category[]
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role           @default(USER)

  companyId String?
  company   Company?       @relation(fields: [companyId], references: [id], onDelete: SetNull)

  permission UserPermission?

  // NextAuth ilişkileri
  accounts      Account[]
  sessions      Session[]
  movements     StockMovement[]

  @@index([companyId])
}

model UserPermission {
  id                 String  @id @default(cuid())
  canAccessDashboard Boolean @default(false)
  canAddStock        Boolean @default(false)
  canRemoveStock     Boolean @default(false)
  canDeleteStock     Boolean @default(false) // Stok silme yetkisi
  canSeeCost         Boolean @default(false)
  canSeeProfit       Boolean @default(false)
  canSeeLogs         Boolean @default(false) // Ürün loglarını görme yetkisi
  canSeeMovementsPage Boolean @default(false) // Genel hareket sayfasını görme yetkisi

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String      @id @default(cuid())
  name          String
  companyId     String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        Category?   @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction)
  subCategories Category[]  @relation("SubCategories")
  stockItems    StockItem[]

  @@index([companyId])
}

// prisma/schema.prisma dosyanızdaki mevcut StockItem modelini
// aşağıdaki ile değiştirin.

model StockItem {
  id           String          @id @default(cuid())
  name         String
  description  String?         @db.Text
  sku          String?         @unique // Stok Kodu
  barcode      String?         @unique
  brand        String?
  location     String?

  quantity     Int
  minStockLevel Int?           @default(0)
  maxStockLevel Int?
  unit         String          @default("adet")

  costPrice    Float
  sellingPrice Float
  vatRate      Float           @default(20) // KDV Oranı

  companyId  String
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category?       @relation(fields: [categoryId], references: [id])

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  movements StockMovement[]

  @@index([companyId])
  @@index([categoryId])
}

model StockMovement {
  id           String            @id @default(cuid())
  type         StockMovementType
  quantity     Int
  notes        String?
  createdAt    DateTime          @default(now())
  costPrice    Float?
  sellingPrice Float?

  stockItemId String
  stockItem   StockItem         @relation(fields: [stockItemId], references: [id], onDelete: Cascade)

  userId    String
  user      User              @relation(fields: [userId], references: [id])

  @@index([stockItemId])
  @@index([userId])
}

// Rolleri bir enum olarak tanımlamak kod tutarlılığı sağlar.
enum Role {
  USER
  MANAGER
  ADMIN
}

enum StockMovementType {
  IN
  OUT
  ADJUST
}
